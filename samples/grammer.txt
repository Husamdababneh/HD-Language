
# In My opinion  programming is the act of manipulating a set of formally defined types using alogrithms and basic procedures.

# Data Types (aka data structures) are the building blocks of any program .
# The act of manipulating these structure is how you build the program. 

In this project, I'm trying to design a consistent prgraming language 

# Defining statments consistently, means that every type, sturct, procedure with all their variation must have a consistent way of being defined 

Here is the basic Idea

defining stuff : 
                             = mutable
  Defineing Symbol           : immutable
--------------------|        -----|
	                V             V
			<name>  :  <<type>> [:, =]  <value*> ; 

 Type can be infferd       ^
---------------------------|
	in many cases



Note : 
 - *Value could be a  expression, procedure scope or struct block
 -  At least [type] or a [value] should be defined 





This syign "<<>>" means : Optional





struct { }


Entity :: struct {} 
Entity :: enum {} 
Entity :: () ->  {} 
Entity := <exp> 


Entity := <exp> 

+ * / - % << >>  == != > < <= >= & |   [BINARY OPERATORS]
= 									 [ASSIGN OPERATORS]




Consider this


 enum {} -> this should be parsed as anonymous enum
 flag {} -> this should be parsed as anonymous flag set
 struct {} -> this should be parsed as anonymous struct
 proc ( <paramater-list> ) -> ( <return-types> ) this should be parsed as anonymous proc aka lambda

 all of the above should be considered as a type ??
















