

S     -> H B C $
H     -> Header : { Decls }
B	  -> Body : { Bs  }
Ds    -> D Ds | &
D     -> IDENT : TV ;

TV    -> TYPE |
	  	 TYPE =  VALUE |
		 = VALUE

VALUE -> LETIRAL |
	  	 REFERENCED

TYPE  -> u8      | u16 |
		 u32     | u64 |
		 float32 | float64 |
		 string  | char

IDENT -> [ a-z A-z _ ]+ [ a-z A-z _ 0-9]*
///
 primitive types
 
    
2 - Variables 
 2.1 - Numbers.
       var1 : u8 : 

Definitions

1 - primitive types
	constants	     -> <name> ::= <value> ->functions and structs are considered constants 
	unsigned integers -> u8, u16, u32, u64
	signed   integers -> s8, s16, s32, s64
	floating points   -> float32 ,float64
	strings	 	  -> string 
	static array 	 -> [<size>/ <constexpr int> ] 
	dynamic array     -> [..]
	ranges 		   -> int .. int

2 - expresion		  ->  

3 - Blocks		    -> { <statments> }

4 - Functions (Procedures)
	anonymous 		->  () -> () { } 
	normal definition -> <name> :: (<argument list>) -> (<return list>) <block>
		   			  	 this should work inside other functions
						 
5 - Data Structers
  	strcuture 	  -> <name> :: struct <block>




