/* */ 
/* ========================================================================
   $File: lex.cpp
   $Date: 2020-04-04
   $Revision: : @Incomplete
   $Creator: Husam Dababneh
   $Description: Defines Lexer functionality & Data Structures
   ========================================================================*/ 
#pragma
///s
#pragma once
/* This is a comment */

// Hello This is also a comment

/* This is also */

/*
	This is multiline comment 
	/*
		This is nested multiline comment 
	*/
*/

Header :: struct {
	Tag     : [455] #char = "PAK"; // first 3 characters are constants 
	IDK     : u32;
	Version : u32;
	ResNum  : u32;
}
			/* aa */
			

// This should have variable size
FilesHeaders :: struct {
	Filename	: [..] #char;
	Null		: #char = "\0" ; // this is a constant 
	ROFF		: u32;
	Size		: u32;
	Unknown1	: u32;
	Unknown2	: u32;
};

// variable size
FilesDataA :: [Header.ResNum]
{
	if Header.Tag[3] == "A" {
	   Read it.Size;
	}
	
	IF Header.Tag[3] == "C" {
	   PackedBlockSize = Read sizeof(u32);
	   UnpackedBlockSize = Read sizeof(u32);
	   PackedData = Read PackedBlockSize;
	   UnpackedData : [UnpackedBlockSize]u8 ;
	   decompress(data,PackedBlockSize, UnpackedData);
	}
};

FilesDataC :: [Header.ResNum]
{
	PackedBlockSize = Read sizeof(u32);
	UnpackedBlockSize = Read sizeof(u32);
	PackedData = Read PackedBlockSize;
	UnpackedData : [UnpackedBlockSize] u8;
	decompress(data,PackedBlockSize, UnpackedData);
};

File :: struct {
	Header header;
	FilesHeadere[header.ResNum];
	
}

proc ::  () {
	file = openFile("filename");
	file.read(Header)
	Proccess Header;
	Proccess FilesHeaders;
	Proceess FilesData;
	b = a + 0x000005;
	b = a + 0b000005;
	b = a + 0o000005;
	b = a + 0o000005;
	5+6
}



/*




*/
